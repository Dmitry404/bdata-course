/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.data;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3550706432596017039L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"avro.data\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"total\",\"type\":\"double\"},{\"name\":\"goods\",\"type\":{\"type\":\"map\",\"values\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public double total;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Double> goods;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param total The new value for total
   * @param goods The new value for goods
   */
  public Order(java.lang.Integer id, java.lang.Double total, java.util.Map<java.lang.CharSequence,java.lang.Double> goods) {
    this.id = id;
    this.total = total;
    this.goods = goods;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return total;
    case 2: return goods;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: total = (java.lang.Double)value$; break;
    case 2: goods = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public java.lang.Double getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'goods' field.
   * @return The value of the 'goods' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getGoods() {
    return goods;
  }

  /**
   * Sets the value of the 'goods' field.
   * @param value the value to set.
   */
  public void setGoods(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.goods = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static avro.data.Order.Builder newBuilder() {
    return new avro.data.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static avro.data.Order.Builder newBuilder(avro.data.Order.Builder other) {
    return new avro.data.Order.Builder(other);
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static avro.data.Order.Builder newBuilder(avro.data.Order other) {
    return new avro.data.Order.Builder(other);
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private int id;
    private double total;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> goods;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.data.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total)) {
        this.total = data().deepCopy(fields()[1].schema(), other.total);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.goods)) {
        this.goods = data().deepCopy(fields()[2].schema(), other.goods);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.data.Order other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total)) {
        this.total = data().deepCopy(fields()[1].schema(), other.total);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.goods)) {
        this.goods = data().deepCopy(fields()[2].schema(), other.goods);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public avro.data.Order.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public avro.data.Order.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public java.lang.Double getTotal() {
      return total;
    }

    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public avro.data.Order.Builder setTotal(double value) {
      validate(fields()[1], value);
      this.total = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public avro.data.Order.Builder clearTotal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'goods' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getGoods() {
      return goods;
    }

    /**
      * Sets the value of the 'goods' field.
      * @param value The value of 'goods'.
      * @return This builder.
      */
    public avro.data.Order.Builder setGoods(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[2], value);
      this.goods = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'goods' field has been set.
      * @return True if the 'goods' field has been set, false otherwise.
      */
    public boolean hasGoods() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'goods' field.
      * @return This builder.
      */
    public avro.data.Order.Builder clearGoods() {
      goods = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Order build() {
      try {
        Order record = new Order();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.total = fieldSetFlags()[1] ? this.total : (java.lang.Double) defaultValue(fields()[1]);
        record.goods = fieldSetFlags()[2] ? this.goods : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
