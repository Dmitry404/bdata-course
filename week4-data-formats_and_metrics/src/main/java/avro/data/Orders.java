/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.data;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Orders list */
@org.apache.avro.specific.AvroGenerated
public class Orders extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5612683015074216960L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Orders\",\"namespace\":\"avro.data\",\"doc\":\"Orders list\",\"fields\":[{\"name\":\"comments\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Order\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"total\",\"type\":\"double\"},{\"name\":\"goods\",\"type\":{\"type\":\"map\",\"values\":\"double\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence comments;
  @Deprecated public java.util.List<avro.data.Order> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Orders() {}

  /**
   * All-args constructor.
   * @param comments The new value for comments
   * @param data The new value for data
   */
  public Orders(java.lang.CharSequence comments, java.util.List<avro.data.Order> data) {
    this.comments = comments;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return comments;
    case 1: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: comments = (java.lang.CharSequence)value$; break;
    case 1: data = (java.util.List<avro.data.Order>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'comments' field.
   * @return The value of the 'comments' field.
   */
  public java.lang.CharSequence getComments() {
    return comments;
  }

  /**
   * Sets the value of the 'comments' field.
   * @param value the value to set.
   */
  public void setComments(java.lang.CharSequence value) {
    this.comments = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.List<avro.data.Order> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.List<avro.data.Order> value) {
    this.data = value;
  }

  /**
   * Creates a new Orders RecordBuilder.
   * @return A new Orders RecordBuilder
   */
  public static avro.data.Orders.Builder newBuilder() {
    return new avro.data.Orders.Builder();
  }

  /**
   * Creates a new Orders RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Orders RecordBuilder
   */
  public static avro.data.Orders.Builder newBuilder(avro.data.Orders.Builder other) {
    return new avro.data.Orders.Builder(other);
  }

  /**
   * Creates a new Orders RecordBuilder by copying an existing Orders instance.
   * @param other The existing instance to copy.
   * @return A new Orders RecordBuilder
   */
  public static avro.data.Orders.Builder newBuilder(avro.data.Orders other) {
    return new avro.data.Orders.Builder(other);
  }

  /**
   * RecordBuilder for Orders instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Orders>
    implements org.apache.avro.data.RecordBuilder<Orders> {

    private java.lang.CharSequence comments;
    private java.util.List<avro.data.Order> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.data.Orders.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.comments)) {
        this.comments = data().deepCopy(fields()[0].schema(), other.comments);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Orders instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.data.Orders other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.comments)) {
        this.comments = data().deepCopy(fields()[0].schema(), other.comments);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'comments' field.
      * @return The value.
      */
    public java.lang.CharSequence getComments() {
      return comments;
    }

    /**
      * Sets the value of the 'comments' field.
      * @param value The value of 'comments'.
      * @return This builder.
      */
    public avro.data.Orders.Builder setComments(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.comments = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'comments' field has been set.
      * @return True if the 'comments' field has been set, false otherwise.
      */
    public boolean hasComments() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'comments' field.
      * @return This builder.
      */
    public avro.data.Orders.Builder clearComments() {
      comments = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.List<avro.data.Order> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public avro.data.Orders.Builder setData(java.util.List<avro.data.Order> value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public avro.data.Orders.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Orders build() {
      try {
        Orders record = new Orders();
        record.comments = fieldSetFlags()[0] ? this.comments : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : (java.util.List<avro.data.Order>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
